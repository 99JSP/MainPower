(() => {
  // config/config.ts
  var config = {
    Banks: [
      {
        name: "Bank",
        coords: { x: 149.78, y: -1040.95, z: 29.37 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: 150.0386, y: -1040.7106, z: 29.3741 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: 149.91, y: -1040.74, z: 29.374 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: -1212.63, y: -330.78, z: 37.59 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: -2962.47, y: 482.93, z: 15.5 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: -350.99, y: -49.99, z: 48.84 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: 1175.02, y: 2706.87, z: 37.89 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: -113.01, y: 6470.24, z: 31.43 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: 246.63, y: 223.62, z: 106 },
        blipEnabled: true
      },
      {
        name: "Bank",
        coords: { x: 314.3904, y: -279.1545, z: 54.1708 },
        blipEnabled: true
      }
    ],
    target: false,
    BankTarget: {
      coords: { x: 149.78, y: -1040.95, z: 29.37 }
    }
  };
  var config_default = config;

  // ../../node_modules/@project-error/pe-utils/lib/client/functions.js
  var RegisterNuiCB = (event, callback) => {
    RegisterNuiCallbackType(event);
    on(`__cfx_nui:${event}`, callback);
  };

  // client/client.ts
  var Delay = (time) => new Promise((resolve) => setTimeout(resolve, time));
  var isNearBank = false;
  var sleep = 1e4;
  onNet("MP-Banking:OpenClient", (cash, bank, name) => {
    SendNUIMessage({
      action: "openPage",
      data: {
        pageName: "MPBANKING",
        playerCash: cash,
        playerBank: bank,
        fullName: name
      }
    });
    SetNuiFocus(true, true);
  });
  onNet("MP-Banking:UpdateClient", (cash, bank) => {
    SendNUIMessage({
      action: "updateDataMoney",
      data: {
        newCashAmount: cash,
        newBankAmount: bank
      }
    });
  });
  onNet("MP-Banking:Management", () => {
    const source = PlayerId();
  });
  RegisterNuiCB("BankingDetails", (data, cb) => {
    const bType = data.buttonType;
    const amount = data.amount;
    const id = data.id;
    const source = GetPlayerPed(-1);
    if (bType === "withdraw") {
      emitNet("MP-Banking:withdraw", parseInt(amount));
    } else if (bType === "deposit") {
      emitNet("MP-Banking:deposit", parseInt(amount));
    } else if (bType === "transfer") {
      emitNet("MP-Banking:transfer", parseInt(amount), parseInt(id));
    }
    cb("Success");
  });
  RegisterNuiCB("closeMenu", (_, cb) => {
    SetNuiFocus(false, false);
    SendNUIMessage({
      action: "closePage",
      data: {
        pageName: "MPBANKING"
      }
    });
    cb(true);
  });
  async function Blips() {
    for (const bank of config_default.Banks) {
      if (bank.blipEnabled) {
        const blip = AddBlipForCoord(bank.coords.x, bank.coords.y, bank.coords.z);
        SetBlipSprite(blip, 108);
        SetBlipDisplay(blip, 4);
        SetBlipScale(blip, 0.8);
        SetBlipColour(blip, 2);
        SetBlipAsShortRange(blip, true);
        BeginTextCommandSetBlipName("STRING");
        AddTextComponentString(bank.name);
        EndTextCommandSetBlipName(blip);
      }
    }
  }
  Blips();
  async function BankTarget() {
    const source = PlayerPedId();
    const playerPos = GetEntityCoords(PlayerPedId(), false);
    isNearBank = false;
    for (const bank of config_default.Banks) {
      if (Vdist(playerPos[0], playerPos[1], playerPos[2], bank.coords.x, bank.coords.y, bank.coords.z) < 20) {
        sleep = 1500;
      }
      if (Vdist(playerPos[0], playerPos[1], playerPos[2], bank.coords.x, bank.coords.y, bank.coords.z) < 2.5) {
        isNearBank = true;
        sleep = 10;
        if (isNearBank && IsControlPressed(0, 38)) {
          emitNet("MP-Banking:Open", source);
          break;
        }
      }
    }
  }
  setTick(async () => {
    await Delay(sleep);
    BankTarget();
  });
})();
//# sourceMappingURL=data:application/json;base64,
